{
  "uid" : "30c4b8c5790f6a98",
  "name" : "test_initative_counts_TC_5",
  "fullName" : "tests.test_initiatives_ui.Test_Main#test_initative_counts_TC_5",
  "historyId" : "6919ba10a45e8f396b45f10f2a67435a",
  "time" : {
    "start" : 1674737388794,
    "stop" : 1674737420940,
    "duration" : 32146
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Inactives count bug",
  "statusTrace" : "self = <tests.test_initiatives_ui.Test_Main object at 0x000002C195A1AB10>, setup = <seleniumwire.webdriver.Chrome (session=\"948336f2b998d4d34d150b8b92214cdb\")>\n\n    def test_initative_counts_TC_5(self,setup):\n        self.browser = setup\n        self.browser.get(Data.starting_url)\n>       self.check_initative_counts_and_updates()\n\ntests\\test_initiatives_ui.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_initiatives_ui.Test_Main object at 0x000002C195A1AB10>\n\n    def check_initative_counts_and_updates(self):\n        sleep(2)\n        self.send_keys(Data.email_field,Data.email)\n        self.send_keys(Data.pswd_field,Data.password)\n        self.click(Data.login_btn)\n        self.click(Data.feedback_name_btn)\n        self.click(Data.choose_feedback)\n        #getting all initiatives initial counts\n        initial_actives_count = int(self.find_text(Data.active_inits_count))\n        initial_inactive_count = int(self.find_text(Data.inactive_inits_count))\n        initial_closed_count = int(self.find_text(Data.closed_inits_count))\n        initial_recycle_bin_count = int(self.find_text(Data.status_recycle_bin))\n        sleep(3)\n        self.hover(Data.for_hover)\n        self.click(Data.first_create_init_btn)\n        self.send_keys(Data.initiative_title,'TC_5')\n        self.send_keys(Data.initiative_description,'test5')\n        self.click(Data.waiting_rootcause_first_option)\n        self.click(Data.initiative_create_btn)\n        #getting active initiatives count after creating\n        actives_count_after = int(self.find_text(Data.active_inits_count))\n        self.click(Data.for_TC_5)\n        self.click(Data.status_change_dropdown)\n        self.click(Data.staturs_inactive_select)\n        self.click(Data.initiatives_icon)\n        #getting inactive initiatives count after creating\n    \n        sleep(3)\n    \n        inactives_count_after = int(self.find_text(Data.inactive_inits_count))\n        self.click(Data.inactives_category)\n        self.click(Data.for_TC_5)\n        self.click(Data.status_change_dropdown)\n        self.click(Data.status_closed_select)\n        self.send_keys(Data.closing_description,\"anything\")\n        self.click(Data.closing_confirm)\n        self.click(Data.initiatives_icon)\n        sleep(3)\n        #getting closed initiatives count after creating\n        closed_count_after = int(self.find_text(Data.closed_inits_count))\n        self.click(Data.closed_category)\n        self.click(Data.delete_drop)\n        self.click(Data.delete_btn)\n        self.click(Data.delete_confirm)\n        sleep(3)\n        #getting recycle bin count after deleting\n        recycle_bin_count_after = int(self.find_text(Data.status_recycle_bin))\n        assert initial_actives_count == actives_count_after - 1,\"Actives count bug\"\n>       assert initial_inactive_count == inactives_count_after - 1,\"Inactives count bug\"\nE       AssertionError: Inactives count bug\n\npages\\Initiatives.py:180: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1674737378795,
      "stop" : 1674737388793,
      "duration" : 9998
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "setup::0",
    "time" : {
      "start" : 1674737421127,
      "stop" : 1674737423318,
      "duration" : 2191
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_initiatives_ui"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "Artashes"
  }, {
    "name" : "thread",
    "value" : "12424-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_initiatives_ui"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "30c4b8c5790f6a98.json",
  "parameterValues" : [ ]
}
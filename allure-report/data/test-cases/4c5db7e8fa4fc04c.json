{
  "uid" : "4c5db7e8fa4fc04c",
  "name" : "test_create_initiative_without_waiting_root_cause_TC_26",
  "fullName" : "tests.test_initiatives_ui.Test_Main#test_create_initiative_without_waiting_root_cause_TC_26",
  "historyId" : "96b5f879cd2d618f2e4e656d2ed4a854",
  "time" : {
    "start" : 1674737631867,
    "stop" : 1674737631867,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=109.0.5414.76)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00D86643]\n\t(No symbol) [0x00D1BE21]\n\t(No symbol) [0x00C1DA9D]\n\t(No symbol) [0x00C03995]\n\t(No symbol) [0x00C023D3]\n\t(No symbol) [0x00C00C35]\n\t(No symbol) [0x00C98CBF]\n\t(No symbol) [0x00C6FD7C]\n\t(No symbol) [0x00C86B09]\n\t(No symbol) [0x00C6FB76]\n\t(No symbol) [0x00C449C1]\n\t(No symbol) [0x00C45E5D]\n\tGetHandleVerifier [0x00FFA142+2497106]\n\tGetHandleVerifier [0x010285D3+2686691]\n\tGetHandleVerifier [0x0102BB9C+2700460]\n\tGetHandleVerifier [0x00E33B10+635936]\n\t(No symbol) [0x00D24A1F]\n\t(No symbol) [0x00D2A418]\n\t(No symbol) [0x00D2A505]\n\t(No symbol) [0x00D3508B]\n\tBaseThreadInitThunk [0x75A27D69+25]\n\tRtlInitializeExceptionChain [0x775FBB9B+107]\n\tRtlClearBits [0x775FBB1F+191]",
  "statusTrace" : "request = <SubRequest 'setup' for <Function test_create_initiative_without_waiting_root_cause_TC_26>>, browser1 = 'chrome'\nurl = 'https://outerloop.questionpro.com/'\n\n    @pytest.fixture(autouse=True)\n    def setup(request, browser1, url):\n        load_dotenv\n    \n        global browser\n        if browser1 == \"chrome\" and url == 'prod':\n            chrome_options = Options()\n            chrome_options.add_argument(\"--capture=no\")\n            chrome_options.add_argument(\"--log-level=3\")\n            chrome_options.add_argument(\"--start-maximized\")\n            #chrome_options.add_argument(\"--headless\")\n            browser = webdriver.Chrome(executable_path=ChromeDriverManager().install(),options = chrome_options)\n            url = 'https://outerloop.questionpro.com/'\n        elif browser1 == \"edge\":\n            #edge_options = EdgeOptions()\n            #edge_options.add_experimental_option('excludeSwitches', ['enable-logging'])\n            browser = webdriver.Edge(executable_path=EdgeChromiumDriverManager().install()),#options=edge_options)\n    \n        elif browser1 == 'devrequests' and url == 'dev':\n            chrome_options = Options()\n            chrome_options.add_argument(\"--capture=no\")\n            chrome_options.add_argument(\"--log-level=3\")\n            chrome_options.add_argument(\"--start-maximized\")\n            browser = RequestDriver.Chrome(executable_path=ChromeDriverManager().install(),options = chrome_options)\n            url = 'https://outerloop-frontend-dev.herokuapp.com/'\n    \n        elif browser1 == 'devrequests' and url == 'prod':\n            chrome_options = Options()\n            chrome_options.add_argument(\"--capture=no\")\n            chrome_options.add_argument(\"--log-level=3\")\n            chrome_options.add_argument(\"--start-maximized\")\n            browser = RequestDriver.Chrome(executable_path=ChromeDriverManager().install(),options = chrome_options)\n            url = 'https://outerloop.questionpro.com/'\n    \n        elif browser1 == 'for_gmail' and url == 'for_gmail':\n            chrome_options = Options()\n            chrome_options.add_argument(\"--capture=no\")\n            chrome_options.add_argument(\"--log-level=3\")\n            browser = uc.Chrome(executable_path=ChromeDriverManager().install(),options = chrome_options)\n            url = 'https://outerloop.questionpro.com/'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n        browser.get(url)\n>       browser.maximize_window()\n\ntests\\conftest.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:592: in maximize_window\n    self.execute(command, None)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C195776550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...dInitThunk [0x75A27D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x775FBB9B+107]\\\\n\\\\tRtlClearBits [0x775FBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=109.0.5414.76)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00D86643]\nE       \t(No symbol) [0x00D1BE21]\nE       \t(No symbol) [0x00C1DA9D]\nE       \t(No symbol) [0x00C03995]\nE       \t(No symbol) [0x00C023D3]\nE       \t(No symbol) [0x00C00C35]\nE       \t(No symbol) [0x00C98CBF]\nE       \t(No symbol) [0x00C6FD7C]\nE       \t(No symbol) [0x00C86B09]\nE       \t(No symbol) [0x00C6FB76]\nE       \t(No symbol) [0x00C449C1]\nE       \t(No symbol) [0x00C45E5D]\nE       \tGetHandleVerifier [0x00FFA142+2497106]\nE       \tGetHandleVerifier [0x010285D3+2686691]\nE       \tGetHandleVerifier [0x0102BB9C+2700460]\nE       \tGetHandleVerifier [0x00E33B10+635936]\nE       \t(No symbol) [0x00D24A1F]\nE       \t(No symbol) [0x00D2A418]\nE       \t(No symbol) [0x00D2A505]\nE       \t(No symbol) [0x00D3508B]\nE       \tBaseThreadInitThunk [0x75A27D69+25]\nE       \tRtlInitializeExceptionChain [0x775FBB9B+107]\nE       \tRtlClearBits [0x775FBB1F+191]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1674737631867,
      "stop" : 1674737643066,
      "duration" : 11199
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\n  (Session info: chrome=109.0.5414.76)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00D86643]\n\t(No symbol) [0x00D1BE21]\n\t(No symbol) [0x00C1DA9D]\n\t(No symbol) [0x00C03995]\n\t(No symbol) [0x00C023D3]\n\t(No symbol) [0x00C00C35]\n\t(No symbol) [0x00C98CBF]\n\t(No symbol) [0x00C6FD7C]\n\t(No symbol) [0x00C86B09]\n\t(No symbol) [0x00C6FB76]\n\t(No symbol) [0x00C449C1]\n\t(No symbol) [0x00C45E5D]\n\tGetHandleVerifier [0x00FFA142+2497106]\n\tGetHandleVerifier [0x010285D3+2686691]\n\tGetHandleVerifier [0x0102BB9C+2700460]\n\tGetHandleVerifier [0x00E33B10+635936]\n\t(No symbol) [0x00D24A1F]\n\t(No symbol) [0x00D2A418]\n\t(No symbol) [0x00D2A505]\n\t(No symbol) [0x00D3508B]\n\tBaseThreadInitThunk [0x75A27D69+25]\n\tRtlInitializeExceptionChain [0x775FBB9B+107]\n\tRtlClearBits [0x775FBB1F+191]\n\n",
    "statusTrace" : "  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 901, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\artas\\OneDrive\\Desktop\\New folder (2)\\outerloop-automation-tests\\tests\\conftest.py\", line 130, in setup\n    browser.maximize_window()\n  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 592, in maximize_window\n    self.execute(command, None)\n  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\artas\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_initiatives_ui"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "Artashes"
  }, {
    "name" : "thread",
    "value" : "12424-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_initiatives_ui"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "4c5db7e8fa4fc04c.json",
  "parameterValues" : [ ]
}